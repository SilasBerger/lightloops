#!/usr/bin/env python3

from cleo.commands.command import Command
from cleo.helpers import argument, option
from cleo.application import Application
import subprocess
import os
from pathlib import Path

class InstallCommand(Command):
    name = "install"
    description = "Install the LightLoops firmware on the connected device."

    def handle(self):
        # ./mpremote fs cp -r src/* :
        self.line("Installing LightLoops firmware...")
        src_files = [str(p) for p in Path("src").glob("*")]
        subprocess.run(
            ["./venv/bin/mpremote", "fs", "cp", "-r"] + src_files + [":"],
            check=True
        )
        self.line("<comment>LightLoops firmware installed successfully!</comment>")

class UninstallCommand(Command):
    name = "uninstall"
    description = "Uninstall LightLoops firmware from the connected device. Does not delete auxiliary files, such as device_id."

    PROTECTED_ROOT_FILES = [
        "boot.py",
        "device_id"
    ]

    def handle(self):
        self.line("Removing firmware files...")
        
        # Get list of files/directories at root
        list_cmd = ["./venv/bin/mpremote", "fs", "ls", ":"]
        result = subprocess.run(list_cmd, capture_output=True, text=True)
        
        if result.returncode != 0:
            self.line("<error>Failed to list device files!</error>")
            return

        entries = [" ".join(line.strip().split(" ")[1:]) for line in result.stdout.split("\n")]
        entries = [entry for entry in entries if entry != ":" and entry != "" and entry not in self.PROTECTED_ROOT_FILES]

        print(entries)

        for entry in entries:
            delete_cmd = [
                "./venv/bin/mpremote", 
                "fs", 
                "rm", 
                "-r", 
                f":{entry}"
            ]
            subprocess.run(delete_cmd, check=False)  # Continue on individual failures

        self.line("<comment>Cleanup complete (boot.py preserved)</comment>")

application = Application()
application.add(InstallCommand())
application.add(UninstallCommand())

if __name__ == "__main__":
    application.run()